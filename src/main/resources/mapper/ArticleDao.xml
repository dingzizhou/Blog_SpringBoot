<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.springboot.dao.ArticleDao">

    <resultMap id="articleListMap" type="com.example.springboot.model.Article">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="cover" property="cover"/>
        <result column="content" property="content"/>
        <result column="isTop" property="isTop"/>
        <result column="isRecycler" property="isRecycler"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="view" property="view"/>
        <association property="category" javaType="com.example.springboot.model.Category">
            <id column="category_id" property="id"/>
            <result column="category_name" property="name"/>
        </association>
        <collection property="tagList" ofType="com.example.springboot.model.Tag">
            <id column="tag_id" property="id"/>
            <result column="tag_name" property="name"/>
        </collection>
    </resultMap>

    <select id="articleList" resultMap="articleListMap">
        select a.id,a.title,cover,t_category.name category_name,t_category.id category_id,a.content,t_tag.name tag_name,t_tag.id tag_id,isTop,createTime,updateTime,a.view from
        (
            select t_article.id,istop,title,cover,createTime,updateTime,category_id,view,content from t_article
            <where>
                1=1
                <if test="condition.categoryId != null">
                    and category_id = #{condition.categoryId}
                </if>
                <if test="condition.tagId != null">
                    and title in (select title from t_tag join t_article_tag on t_article_tag.tag_id = t_tag.id where t_tag.id = #{condition.tagId})
                </if>
                <if test="condition.keywords != null">
                    and title like concat('%',#{condition.keywords},'%')
                </if>
            </where>
            order by istop desc
            limit ${(condition.current-1)*10},10
        ) a
        left join t_article_tag on a.id = t_article_tag.article_id
        left join t_category on a.category_id=t_category.id
        left join t_tag on t_tag.id = t_article_tag.tag_id
    </select>

    <select id="articleListCount" resultType="java.lang.Integer">
        select count(distinct t_article.id) from t_article
        left join t_article_tag on t_article.id = t_article_tag.article_id
        left join t_category on t_article.category_id=t_category.id
        left join t_tag on t_tag.id = t_article_tag.tag_id
        <where>
            1=1
            <if test="condition.keywords != null">
                and t_article.title like concat('%',#{condition.keywords},'%')
            </if>
            <if test="condition.categoryId != null">
                and t_article.category_id = #{condition.categoryId}
            </if>
            <if test="condition.tagId != null">
                and t_tag.id = #{condition.tagId}
            </if>
        </where>
    </select>

    <select id="getArticleById" resultMap="articleListMap">
        select t_article.id,t_article.title,t_article.cover,content,t_category.name category_name,t_category.id category_id,t_tag.name tag_name,t_tag.id tag_id,isTop,createTime,updateTime,view from t_article
        left join t_article_tag on t_article.id = t_article_tag.article_id
        left join t_category on t_article.category_id=t_category.id
        left join t_tag on t_tag.id = t_article_tag.tag_id
        where t_article.id = #{id}
    </select>

    <update id="updateIsTop">
        update MyBlog.t_article set isTop = 1-t_article.isTop where id = #{id}
    </update>

    <update id="updateArticle">
        update t_article
        set title = #{article.title},category_id=#{article.category.id},content=#{article.content},isTop=#{article.isTop},
            updateTime=NOW() where id = #{article.id}
    </update>

    <insert id="addArticle" useGeneratedKeys="true" keyProperty="id">
        insert into t_article (title,category_id,content,isTop,createTime)
        values (#{article.title},#{article.category.id},#{article.content},#{article.isTop},NOW())
    </insert>

    <delete id="delArticleTag">
        delete from t_article_tag where 1=1
        <if test="article_id != null">
            and article_id = #{article_id}
        </if>
        <if test="tag_id != null">
            and tag_id = #{tag_id}
        </if>
    </delete>

    <insert id="addArticleTag">
        insert into t_article_tag (article_id, tag_id)  values
        <foreach collection="tagList" item="tagList" separator="," close=";">
            (#{article_id},#{tagList.id})
        </foreach>
    </insert>

    <select id="getArticleView" resultType="com.example.springboot.model.dto.ArticleView">
        select view,id from t_article;
    </select>

    <update id="saveArticleView">
        update t_article
        set view =
        case id
        <foreach collection="viewList" item="value" index="key">
            when #{value.id} then #{value.view}
        </foreach>
        end
    </update>

</mapper>